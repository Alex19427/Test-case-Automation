import unittest
from inspect import getfullargspec
import warnings
#warnings.filterwarnings("ignore")
from build import {module}
import dill
import pandas as pd
from pandas.util.testing import assert_frame_equal



class Testing(unittest.TestCase):

	
	def setUp(self):
		print('setup')
		with open('user_sol.pkl','wb') as f:
			dill.dump({module},f)

		with open('test_sol.pkl','wb') as f:
			dill.dump({module},f)
		with open('user_sol.pkl','rb') as f:
			self.student_func  =dill.load(f)
		with open('test_sol.pkl','rb') as f:
			self.solution_func = dill.load(f)
		self.data = 'data/{datafile}'
		self.student_return = self.student_func(self.data)
		self.original_return = self.solution_func(self.data)

	#  Check the arguements of the function
	def test_args(self):
		print(' ')
		print(' testing the arguements of the functions')
		print(' ')
		self.args_student =  getfullargspec(self.student_func).args
		self.args_original = getfullargspec(self.solution_func).args
		self.assertEqual(len(self.args_student),len(self.args_original))

	#check the defaults of the function
	def test_defaults(self):
		print(' ')
		print('testing the defaults of the function')

		print(' ')
		self.defaults_student = getfullargspec(self.student_func).defaults
		self.defaults_solution = getfullargspec(self.solution_func).defaults
		self.assertEqual(self.defaults_student,self.defaults_solution)

	
	def test_return(self):
		print('testing the return values')
		
		
		if isinstance(self.student_return,tuple) and isinstance(self.original_return,tuple):
			self.assertTupleEqual(self.student_return,self.original_return)

		elif isinstance(self.student_return,pd.core.frame.DataFrame) and isinstance(self.original_return,pd.core.frame.DataFrame):
			assert_frame_equal(self.student_return , self.original_return)
		else:
			print('not a tuple')
			self.assertEqual(self.student_return , self.original_return)






if __name__ == '__main__':
	unittest.main()
